<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.system.mapper.EventMapper" >
    <resultMap id="BaseResultMap" type="com.system.po.Event" >
        <id column="eventid" property="eventid" jdbcType="VARCHAR" />
        <result column="starttime" property="starttime" jdbcType="DATE" />
        <result column="endtime" property="endtime" jdbcType="DATE" />
        <result column="title" property="title" jdbcType="VARCHAR" />
        <result column="executed" property="executed" jdbcType="INTEGER" />
    </resultMap>
    <sql id="Example_Where_Clause" >
        <where >
            <!-- 条件集合 -->
            <!-- 传入集合类型是oredCriteria 循环变量是criteria 关系是或者-->
            <foreach collection="oredCriteria" item="criteria" separator="or" >
                <!-- 如果传入的条件有效 单词的意思标准（相当于条件）.有效 -->
                <if test="criteria.valid" >
                    <!-- <修剪前缀= "("后缀= ")"前缀覆盖 = "和" > -->
                    <trim prefix="(" suffix=")" prefixOverrides="and" >
                        <!-- 条件集合 -->
                        <!-- 集合类型是oredCriteria 循环变量是criteria -->
                        <foreach collection="criteria.criteria" item="criterion" >
                            <!-- 通过判断标准来执行对应的查询条件 -->
                            <!-- 当条件不符合标准的时候 -->
                            <choose >
                                <when test="criterion.noValue" >
                                    and ${criterion.condition}
                                </when>
                                <!-- 条件是一个值的时候 调用此条件 相当与id查询 name查询-->
                                <when test="criterion.singleValue" >
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <!-- 条件是两个值的时候 调用此条件 -->
                                <when test="criterion.betweenValue" >
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <!-- 如果条件是一个集合的话调用此条件 -->
                                <when test="criterion.listValue" >
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>

    <!-- 批量更新 -->
    <sql id="Update_By_Example_Where_Clause" >
        <where >
            <!-- 传入集合类型是example.oredCriteria 循环变量是criteria -->
            <foreach collection="example.oredCriteria" item="criteria" separator="or" >
                <if test="criteria.valid" >
                    <trim prefix="(" suffix=")" prefixOverrides="and" >
                        <foreach collection="criteria.criteria" item="criterion" >
                            <!-- 结构是条件判断如果满足就追加 -->
                            <choose >
                                <when test="criterion.noValue" >
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue" >
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue" >
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue" >
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>

    <sql id="Base_Column_List" >
        <!-- 表中的字段值 -->
        eventid, starttime,endtime,title,executed
    </sql>


    <!-- 查询的方法 -->
    <!-- 方法名 返回值类型 参数类型 -->
    <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.system.po.EventExample" >
        select
        <!-- 条件满足 这个字段在exa实体类中 是一个布尔值 -->
        <if test="distinct" >
            distinct
        </if>
        <!-- 正常查询 -->
        <include refid="Base_Column_List" />
        from event
        <!-- 如果参数列表不为空 调用下面的方法 这个方法返回的是参数列表 也可以是条件查询-->
        <if test="_parameter != null" >
                    <include refid="Example_Where_Clause" />
        </if>
        <!-- 如果有分组字段 根据该字段进行分组查询 -->
        <if test="orderByClause != null" >
            order by eventid
        </if>
    </select>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
        select
        <!-- 要查询的字段 -->
        <include refid="Base_Column_List" />
        from event
        where eventid = #{eventid,jdbcType=VARCHAR}
    </select>

    <select id="selectByTitle" resultMap="BaseResultMap" parameterType="java.lang.String" >
        select
        <!-- 正常查询 -->
        <include refid="Base_Column_List" />
        from event
        where title like #{title,jdbcType=VARCHAR}
        <!-- 如果有分组字段 根据该字段进行分组查询 -->
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from event
    where eventid = #{eventid,jdbcType=VARCHAR}
  </delete>

    <delete id="deleteByExample" parameterType="com.system.po.EventExample" >
        delete from event
        <if test="_parameter != null" >
            <include refid="Example_Where_Clause" />
        </if>
    </delete>

    <insert id="insert" parameterType="com.system.po.Event" >
    insert into event (eventid, starttime,endtime,title,executed)
    values (#{eventid,jdbcType=VARCHAR}, #{starttime,jdbcType=DATE}, #{endtime,jdbcType=DATE},
      #{title,jdbcType=VARCHAR},#{executed,jdbcType=INTEGER})
  </insert>

    <!-- 插入方法自动判断有没有参数 没有参数也不会报错 -->
    <insert id="insertSelective" parameterType="com.system.po.Event" >
        insert into event
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="eventid != null" >
                eventid,
            </if>
            <if test="starttime != null" >
                starttime,
            </if>
            <if test="endtime != null" >
                endtime,
            </if>
            <if test="title != null" >
                title,
            </if>
            <if test="executed != null" >
                executed,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="eventid != null" >
                #{eventid,jdbcType=VARCHAR},
            </if>
            <if test="starttime != null" >
                #{starttime,jdbcType=DATE},
            </if>
            <if test="endtime != null" >
                #{endtime,jdbcType=DATE},
            </if>
            <if test="title != null" >
                #{title,jdbcType=VARCHAR},
            </if>
            <if test="executed != null" >
                #{executed,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.system.po.EventExample" resultType="java.lang.Integer" >
        select count(*) from  event
        <if test="_parameter != null" >
            <include refid="Example_Where_Clause" />
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map" >
        update event
        <set >
            <if test="record.eventid != null" >
                eventid = #{record.eventid,jdbcType=VARCHAR},
            </if>
            <if test="record.starttime != null" >
                starttime = #{record.starttime,jdbcType=DATE},
            </if>
            <if test="record.endtime != null" >
                endtime = #{record.endtime,jdbcType=DATE},
            </if>
            <if test="record.title != null" >
                title = #{record.title,jdbcType= VARCHAR},
            </if>
            <if test="record.executed != null" >
                executed = #{record.executed,jdbcType= INTEGER},
            </if>
        </set>
        <if test="_parameter != null" >
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>
    <update id="updateByExample" parameterType="map" >
        update event
        set eventid = #{record.eventid,jdbcType=VARCHAR},
        starttime = #{record.starttime,jdbcType=DATE},
        endtime = #{record.endtime,jdbcType=DATE},
        title = #{record.title.jdbcType=VARCHAR},
        executed = #{record.executed.jdbcType=INTEGER}
        <if test="_parameter != null" >
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.system.po.Event" >
        update event
        <set >
            <if test="starttime != null" >
                starttime = #{starttime,jdbcType=VARCHAR},
            </if>
            <if test="endtime != null" >
                endtime = #{endtime,jdbcType=DATE},
            </if>
            <if test="title != null" >
                title = #{title,jdbcType=VARCHAR},
            </if>
            <if test="executed != null" >
                executed = #{executed,jdbcType=INTEGER},
            </if>
        </set>
        where eventid = #{eventid,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.system.po.Event" >
    update event
    set starttime = #{starttime,jdbcType=DATE},
      endtime = #{endtime,jdbcType=DATE},
      title = #{title,jdbcType=VARCHAR},
      executed = #{executed,jdbcType=INTEGER}
    where eventid = #{eventid,jdbcType=INTEGER}
  </update>

    <update id="updateByid" parameterType="com.system.po.Event" >
    update event
    set starttime = #{starttime},
    endtime = #{endtime},
    title = #{title},
    executed = #{executed},
    where eventid = #{eventid}
    </update>
</mapper>